% Evan Baker
% EAB_hw01_P01.m
% Due 23 January 2014

% rope length equation: 
%   4*X + 2*pi*R = 10
%   R = (10 - 4*X) / (2*pi)                    
% area of square: As = X^2
% area of circle: Ac = pi*(R^2)
% total area: 
%   A = As + Ac
%   A = X^2 + pi*(R^2)
%   A = X^2 + pi*(((10 - 4*X) / (2*pi))^2)

function EAB_HW01_P01()
% Generating X list from 0.5 to 5 in 0.1 steps
X = 0.5:0.1:5;
% Generating corresponding Area list from X values
A = X.^2 + pi*(((10 - 4*X) / (2*pi)).^2);
% Looping through to index minA and then getting the corresponding X value
for i = 1:length(A)
    if A(i) == min(A)
        XminA = X(i);  
    end
end
% Output ideal X for min A
fprintf('The minimum Area is %f and the corresponding X value is %f\n', min(A),XminA)
createfigure(X, A)




%
%  Plotting X vs A; ALL FOLLOWING CODE WAS GENERATED BY MATLAB TO MAKE THE GRAPH LOOK PRETTY
%

function createfigure(X1, Y1)
%CREATEFIGURE(X1, Y1)
%  X1:  vector of x data
%  Y1:  vector of y data

%  Auto-generated by MATLAB on 22-Jan-2014 16:17:47

% Create figure
figure1 = figure('Name',...
    'Square Side Length X vs Combined Square Circle Area');

% Create axes
axes1 = axes('Parent',figure1);
%% Uncomment the following line to preserve the X-limits of the axes
% xlim(axes1,[0.455 5]);
%% Uncomment the following line to preserve the Y-limits of the axes
% ylim(axes1,[0 35]);
box(axes1,'on');
hold(axes1,'all');

% Create plot
plot1 = plot(X1,Y1,'Parent',axes1,'DisplayName','X vs A');

% Create xlabel
xlabel({'X - Square Side Length'});

% Create ylabel
ylabel({'Combined Square-Circle Area'});

% Create title
title({'Side Length X vs Total Area'});

% Get xdata from plot for data statistics
xdata1 = get(plot1, 'xdata');
% Get ydata from plot for data statistics
ydata1 = get(plot1, 'ydata');
% Make sure data are column vectors
xdata1 = xdata1(:);
ydata1 = ydata1(:);


% Get axes xlim
axXLim1 = get(axes1, 'xlim');

% Find the min
ymin1 = min(ydata1);

minValue1 = [ymin1 ymin1];
% Create plot
statLine1 = plot(axXLim1,minValue1,'DisplayName','3.5006','Parent',axes1,...
    'Tag','min y',...
    'LineStyle','-.',...
    'Color',[0 0.75 0.75]);

% Set new line in proper position
setLineOrder(axes1, statLine1, plot1);

% Create legend
legend1 = legend(axes1,'show');
set(legend1,...
    'Position',[0.717049294480262 0.253056326922418 0.110345796572786 0.0907127429805616]);

%-------------------------------------------------------------------------%
function setLineOrder(axesh1, newLine1, associatedLine1)
%SETLINEORDER(AXESH1,NEWLINE1,ASSOCIATEDLINE1)
%  Set line order
%  AXESH1:  axes
%  NEWLINE1:  new line
%  ASSOCIATEDLINE1:  associated line

% Get the axes children
hChildren = get(axesh1,'Children');
% Remove the new line
hChildren(hChildren==newLine1) = [];
% Get the index to the associatedLine
lineIndex = find(hChildren==associatedLine1);
% Reorder lines so the new line appears with associated data
hNewChildren = [hChildren(1:lineIndex-1);newLine1;hChildren(lineIndex:end)];
% Set the children:
set(axesh1,'Children',hNewChildren);

